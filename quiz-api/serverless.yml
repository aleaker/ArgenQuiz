service:
  name: quiz-api

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function #allows to declare iamRoles per lambda

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'} #use "dev" by default if there is not a stage defined
  region: sa-east-1 #deploy to this region and not to default
  environment:
    QUESTIONS_TABLE_NAME: ${self:custom.QuestionsTable.name} #set the table name as an env variable

resources:
  Resources:
    QuestionsTable: ${file(resources/QuestionsTable.yml):QuestionsTable} #dynamodb questions table

functions:
  getQuestions:
    handler: src/handlers/getQuestions.handler #when a GET http request is recived at /questions, this lambda is triggered
    iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:BatchGetItem
      Resource: ${self:custom.QuestionsTable.arn}
    events:
      - http:
          method: GET
          path: /questions

  getQuestionsIds:
    handler: src/handlers/getQuestionsIds.handler
    #   iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: ${self:custom.QuestionsTable.arn}
    events:
      - http:
          method: GET
          path: /questions/ids

  createQuestion:
    handler: src/handlers/createQuestion.handler
    #   iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: ${self:custom.QuestionsTable.arn} #using custom variables to get the arn -> arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/QuestionsTable
    events:
      - http:
          method: POST
          path: /admin/question


#use to define custom variables
custom:
  QuestionsTable: #aws intrinsec functions allow you to get values without hardcoding (Ref and GetAtt)
    name: !Ref QuestionsTable
    arn: !GetAtt QuestionsTable.Arn
